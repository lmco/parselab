##############################################################################
## Copyright 2022 Lockheed Martin Corporation                               ##
##                                                                          ##
## Licensed under the Apache License, Version 2.0 (the "License");          ##
## you may not use this file except in compliance with the License.         ##
## You may obtain a copy of the License at                                  ##
##                                                                          ##
##     http://www.apache.org/licenses/LICENSE-2.0                           ##
##                                                                          ##
## Unless required by applicable law or agreed to in writing, software      ##
## distributed under the License is distributed on an "AS IS" BASIS,        ##
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. ##
## See the License for the specific language governing permissions and      ##
## limitations under the License.                                           ##
##############################################################################


''' GenerateTest.py contains all the necessary classes and functions for generating a
test file for the target parseLab generator's DDL.  A test, in this context, refers to
a file which, when ran, will execute the generated parser and pass in a set of fuzzed
data (based of the supplied perotocol directory).  Once the data has been passed into
the generated parser, the results will be stored and verified to match expectation.'''

import os

from unit_tests.ParselabTest import ParselabTest
from unit_tests import TestUtils
from src.ProtocolDirectoryParser import ProtocolDirectoryParser
from src.utils import gen_util

class GenerateTest(ParselabTest):
    ''' The GenerateTest class derives from the ParselabTest class.  This class is responsible for
    parsing a pre-made protocol directory and using the target parseLab generator to generate a test
    which responds to this protocol directory '''
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.protocol_dir = os.path.join(self.__get_test_protocol_dir(), 'test_protocol')
        self.testcase = os.path.join(self.protocol_dir, gen_util.testcase_dirname, 'test_testcase')

    def __get_test_protocol_dir(self):
        ''' Get the path to the directory which holds the pre-made protocol directory '''
        return os.path.join(gen_util.PARSELAB_TOP, gen_util.unit_tests_dirname, 'GenerateTest')

    def clean(self):
        ''' Clean any files that would have been generated by a previous iteration of this unit test '''
        self.log.info("Cleaning up test_protocol directory")
        expected_files = [gen_util.mission_spec_filename, gen_util.protocol_spec_filename, 'testcases']

        protocol_dir = os.path.abspath(self.protocol_dir)
        TestUtils.rm_files(protocol_dir, expected_files)


    def run(self):
        ''' Execute the unit test.
        1. Clean old files
        2. Parse the pre-made protocol directory for information about how to generate the test
        3. Use the target parseLab generator module to generate a test
        4. Verify that the files which were supposedly created by <module>.generate_test() were appropriately created
        '''
        # Clean up any files from previous tests
        self.clean()

        protocol_dir = os.path.abspath(self.protocol_dir)
        directory_parser = ProtocolDirectoryParser(protocol_dir, logger=self.log)

        if not directory_parser.check_valid():
            self.log.error(TestUtils.invalid_directory_err)
            raise Exception(TestUtils.invalid_directory_err)

        # Load the Generator Under Test
        self.log.info("Creating an instance of the Generator Under Test")
        generator = self.generator_class.create_instance(protocol_dir=protocol_dir, \
                                                              logger=self.log, \
                                                              is_stateful=directory_parser.is_stateful())

        # Verify that the target testcase exists / is valid
        self.log.info("Validating target testcase directory")
        if not directory_parser.verify_testcase(self.testcase):
            self.log.error(TestUtils.invalid_directory_err)
            raise Exception(TestUtils.invalid_directory_err)

        # Generate an executable test with the testing testcase
        self.log.info("Generating an exectuable test with respect to testcase (%s)" % self.testcase)
        test_files = generator.generate_test(self.testcase, self.protocol_dir)

        for f in test_files:
            self.log.info("Verifying File Existence (%s)" % (f))
            if not os.path.isfile(f):
                return gen_util.TEST_FAIL, "generate_test() Returned file (%s) but it does not exist!" % (f)

        return gen_util.TEST_PASS, None
