##############################################################################
## Copyright 2022 Lockheed Martin Corporation                               ##
##                                                                          ##
## Licensed under the Apache License, Version 2.0 (the "License");          ##
## you may not use this file except in compliance with the License.         ##
## You may obtain a copy of the License at                                  ##
##                                                                          ##
##     http://www.apache.org/licenses/LICENSE-2.0                           ##
##                                                                          ##
## Unless required by applicable law or agreed to in writing, software      ##
## distributed under the License is distributed on an "AS IS" BASIS,        ##
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. ##
## See the License for the specific language governing permissions and      ##
## limitations under the License.                                           ##
##############################################################################


#!/usr/bin/env python3

'''
An example of using a Hammer parser in a python script, where the Hammer parser
is wrapped by another c++ program and the wrapper gets loaded into python.
'''

import ctypes

from UDP import UDP

libcustomwrapper_filename = "libcustomparser.so"

# Since our shared library function will return a struct, we need to define
# it in python too.
class udp_msg_t(ctypes.Structure):
    '''Class holding the data for the UDP message as defined by the Hammer Parser'''
    ubyte_512 = ctypes.c_ubyte * 512
    _fields_ = [('src_port', ctypes.c_ushort),
                ('dest_port', ctypes.c_ushort),
                ('length', ctypes.c_ushort),
                ('checksum', ctypes.c_ushort),
                ('data', ubyte_512)]

def main():
    ''' Main Execution Function'''

    # Import our warpper library
    libcustomwrapper_path = (libcustomwrapper_filename)
    libcustomwrapper = ctypes.CDLL(libcustomwrapper_path)
    libcustomwrapper.custom_parse.restype = ctypes.c_void_p

    # Generate a UDP message
    udp_msg = UDP(25515, 32316, "This is a data payload")

    # Parse our UDP message
    void_p_ret = libcustomwrapper.custom_parse(udp_msg.serialized, len(udp_msg.serialized))
    # Cast the retured void* into a udp_msg_t python object
    udp_msg_t_ret = udp_msg_t.from_address(void_p_ret)

    # Print out the data received from our custom parse function
    print("Parsed Data:")
    print(f"  Source Port: {udp_msg_t_ret.src_port}")
    print(f"  Destination Port: {udp_msg_t_ret.dest_port}")
    print(f"  Payload Length: {udp_msg_t_ret.length}")
    print(f"  Checksum: {udp_msg_t_ret.checksum}")
    print(f"  Data: ", end='')
    for i in range(udp_msg_t_ret.length):
        print(f"{chr(udp_msg_t_ret.data[i])}", end='')
    print()

    # Free the memory of the udp_msg_t that was generated by the parse function
    libcustomwrapper.free_udp_msg(void_p_ret)
    # Delete the instance in python also
    del udp_msg_t_ret

if __name__ == '__main__':
    main()
